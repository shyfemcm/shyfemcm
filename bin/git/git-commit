#!/bin/bash
#
#------------------------------------------------------------------------
#
#    Copyright (C) 1985-2020  Georg Umgiesser
#
#    This file is part of SHYFEM.
#
#------------------------------------------------------------------------
#
# handles commit and writes to COMMIT and VERSION files
#
# works both with shyfem and shyfemcm
#
#------------------------------------------------------------
femdir=.
FEMBIN=$femdir/bin

commit_file=./COMMIT
version_file=./VERSION

shyfem_version=""	# will be filled in later - routine to determine version
version_fortran=""	# will be filled in later - fortran file with version
#------------------------------------------------------------

GetVersion()
{
  local bin=$FEMBIN

  if [ -x $bin/shyfem_version.pl ]; then
    shyfem_version=$bin/shyfem_version.pl
  elif [ -x $bin/shyfem_util/shyfem_version.pl ]; then
    shyfem_version=$bin/shyfem_util/shyfem_version.pl
  else
    echo "*** cannot find shyfem_version.pl ...aborting"
    exit 13
  fi

  echo "using $shyfem_version to get version"

  version_line=$( $shyfem_version -noextra $version_file )

  if [ $? -ne 0 ]; then
    echo "*** error running $shyfem_version ...aborting"
    exit 9
  fi
}

Fetch()
{
  this_branch=$( git branch -vv | grep -E '^\*' | sed -e 's/\* //' )
  tracking=$( echo $this_branch | sed -e 's/.*\[(.*)\].*/$1/' )
  #echo "branch: $this_branch"

  if [[ $this_branch =~ (\[.*\]) ]]; then
    tracking=${BASH_REMATCH[1]}
    echo "branch is tracking remote $tracking"
  else
    echo "no remote tracking branch setup"
    tracking=""
    return
  fi

  ret=$( git fetch --dry-run 2>&1 )

  if [ "$ret" != "" ]; then
    echo "repository has new stuff..."
    echo "plase do a fetch and pull before committing"
    exit 1
  fi

  ret=$( git status -uno 2>&1 )

  ret=""
  if [ "$ret" != "" ]; then
    echo "repository has new stuff..."
    echo "plase do a pull before committing"
    exit 3
  fi
}

Ask()
{
  echo -n "$1 (y/n) : " | cat >&2
  read yesno
  echo "$yesno"
  [ "$yesno" != "y" ] && exit 1
}

GetMessage()
{
  echo -n "Enter short message: " | cat >&2
  read message
}

GetSpecial()
{
  what=$1
  [ -f tmp.tmp ] && rm -f tmp.tmp
  git status | grep "$what" | sed -E "s/^.*$what//" > tmp.tmp
  if [ -f tmp.tmp -a -s tmp.tmp ]; then
    echo " $what"
    cat tmp.tmp
  fi
  [ -f tmp.tmp ] && rm -f tmp.tmp
}

CheckRules()
{
  if [ -f femcheck/rules/Rules.dist ]; then
    cmp Rules.make femcheck/rules/Rules.dist > /dev/null
  elif [ -f var/rules/Rules.dist ]; then
    cmp Rules.make var/rules/Rules.dist > /dev/null
  else
    echo "cannot find Rules.dist"
    exit 5
  fi
  status=$?

  #echo "CheckRules: $status"
  if [ $force = "YES" ]; then
    :
  elif [ $status -ne 0 ]; then
    echo "Rules.make and Rules.dist are differing"
    echo "You can see the difference with 'make rules_diff'"
    echo "Either subtitute the Rules.make file with Rules.dist"
    echo "  make rules_dist; git add -u"
    echo "or save Rules.make file as new Rules.dist"
    echo "  make rules_new; git add -u"
    echo "You can also run \"git-commit -force\" to force the commit"
    echo "Please do this only if you know what you are doing"
    exit 1
  fi
}

ChangeFortran()
{
  local file

  file=$( tail -1 $version_file )
  if [ ! -f $file ]; then
    echo "*** cannot find file: $file ...aborting"
    exit 7
  fi
  date=$( date +%Y-%m-%d )
  echo "changing file $file adding date $date to commit"
  perl -p -e "s/(commit\s*=\s*).*/\1\'$date\'/g" $file > aux1.tmp
  perl -p -e "s/(COMMIT\}).*/\1\{$date\}/g" aux1.tmp > aux2.tmp
  #exit 1
  mv aux2.tmp $file
  rm aux1.tmp

  version_fortran=$file
}

#------------------------------------------------------------
# cd to base dir and get info
#------------------------------------------------------------

force=NO
[ "$1" = "-force" ] && force=YES
  
cd $femdir

if [ ! -f VERSION ]; then
  echo "*** not in base directory... aborting"
  exit 1
fi

Fetch
CheckRules

git status
git diff --cached --stat
GetSpecial "new file:"
GetSpecial "deleted:"

Ask "Continue?"

#------------------------------------------------------------
# prepare log message
#------------------------------------------------------------

GetMessage

echo "============================================================" > log.tmp
echo ""					>> log.tmp
date 					>> log.tmp
echo "" 				>> log.tmp
echo "$message" 			>> log.tmp
echo "" 				>> log.tmp
git diff --cached --stat 		>> log.tmp
GetSpecial "new file:"			>> log.tmp
GetSpecial "deleted:"			>> log.tmp
GetSpecial "renamed:"			>> log.tmp
echo ""					>> log.tmp

#vi log.tmp

#------------------------------------------------------------
# start committing - until here nothing has changed
#------------------------------------------------------------

Ask "Do you really want to commit?"

echo "Preparing commit"

#--- change subver.f or version.f90

ChangeFortran

#--- change COMMIT

cat log.tmp $commit_file > com.tmp

#--- change VERSION

GetVersion
extra=commit_`date +"%Y-%m-%d"`
echo "$version_line   $extra"        > ver.tmp
echo ""                             >> ver.tmp
cat $version_file                   >> ver.tmp

#--- copy messages to COMMIT and VERSION

mv -f com.tmp $commit_file
mv -f ver.tmp $version_file
rm -f log.tmp

#--- add changed files to actual commit

git add $commit_file $version_file $version_fortran

#--- finally do the commit

git commit -m "$message" --no-verify

#------------------------------------------------------------
# end of routine
#------------------------------------------------------------

